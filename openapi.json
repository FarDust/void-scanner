{
  "openapi": "3.1.0",
  "info": {
    "title": "Anomaly Reaper",
    "description": "API for detecting anomalies in images using PCA",
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint to verify the API is running.\n\nReturns\n-------\nHealthCheckResponse\n    Status of the API",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Create Image",
        "description": "Create a new image record by processing an uploaded image file.\n\nParameters\n----------\nfile : UploadFile\n    The image file to process\n\nReturns\n-------\nImageResponse\n    The processing results with status code 201",
        "operationId": "create_image_images_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_image_images_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get Images",
        "description": "Get list of processed images from the database with pagination.\n\nParameters\n----------\nanomalies_only : bool\n    If True, only return anomalous images\npage : int\n    Page number (1-based)\npage_size : int\n    Number of images per page\nsort_by : str\n    Field to sort images by\nsort_order : str\n    Sort order (\"asc\" or \"desc\")\n\nReturns\n-------\nPaginatedImagesResponse\n    Paginated list of image records",
        "operationId": "get_images_images__get",
        "parameters": [
          {
            "name": "anomalies_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Anomalies Only"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "processed_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedImagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get Image Details",
        "description": "Get details for a specific image.\n\nParameters\n----------\nimage_id : str\n    ID of the image to retrieve\n\nReturns\n-------\nImageResponse\n    Image details",
        "operationId": "get_image_details_images__image_id__get",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}/file": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get Image File",
        "description": "Retrieve the image file for a specific image.\n\nParameters\n----------\nimage_id : str\n    ID of the image to retrieve\n\nReturns\n-------\nFileResponse\n    The image file",
        "operationId": "get_image_file_images__image_id__file_get",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}/classify": {
      "post": {
        "tags": [
          "classifications"
        ],
        "summary": "Api Classify Image",
        "description": "Classify an image as anomalous or normal.\n\nParameters\n----------\nimage_id : str\n    ID of the image to classify\nrequest : ImageClassificationRequest\n    Request containing is_anomaly and optional comment fields\n\nReturns\n-------\nImageClassificationResponse\n    Classification result",
        "operationId": "api_classify_image_images__image_id__classify_post",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageClassificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageClassificationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Api Statistics",
        "description": "Get statistics about processed images.\n\nReturns\n-------\nStatisticsResponse\n    Statistics about processed images",
        "operationId": "api_statistics_statistics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}/visualization": {
      "get": {
        "tags": [
          "visualizations"
        ],
        "summary": "Get Image Visualization",
        "description": "Get visualizations for a specific image including:\n- Original image\n- Heatmap visualization of anomaly regions\n- Bounding box visualization of detected anomalies\n\nParameters\n----------\nimage_id : str\n    ID of the image to visualize\n\nReturns\n-------\nAnomalyVisualizationResponse\n    Multiple visualization types for the image",
        "operationId": "get_image_visualization_images__image_id__visualization_get",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyVisualizationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync-anomaly-data": {
      "post": {
        "tags": [
          "statistics"
        ],
        "summary": "Sync Anomaly Data",
        "description": "Synchronize anomaly detection data from GCS bucket or local storage.\n\nThis endpoint loads pre-calculated anomaly detection data\n\nIt checks which images are already in the database and only imports the new ones.\nNo request body is needed - the endpoint automatically detects the correct data source.\n\nReturns\n-------\nSyncAnomalyDataResponse\n    Summary of synchronization results",
        "operationId": "sync_anomaly_data_sync_anomaly_data_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncAnomalyDataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/images/search": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Search Images",
        "description": "Search images with filtering criteria.\n\nParameters\n----------\nis_anomaly : Optional[bool]\n    Filter by model-detected anomaly status\nstart_date : Optional[datetime]\n    Filter by start date (inclusive)\nend_date : Optional[datetime]\n    Filter by end date (inclusive)\nmin_score : Optional[float]\n    Minimum anomaly score\nmax_score : Optional[float]\n    Maximum anomaly score\nis_classified : Optional[bool]\n    Whether the image has been classified by a user\nuser_classification : Optional[bool]\n    Filter by user classification (True for anomaly, False for normal)\npage : int\n    Page number (1-based)\npage_size : int\n    Number of results per page\nsort_by : str\n    Field to sort by\nsort_order : str\n    Sort order (\"asc\" or \"desc\")\n\nReturns\n-------\nAdvancedFilterResponse\n    Filtered and paginated image records",
        "operationId": "search_images_images_search_get",
        "parameters": [
          {
            "name": "is_anomaly",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Anomaly"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Score"
            }
          },
          {
            "name": "max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Score"
            }
          },
          {
            "name": "is_classified",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Classified"
            }
          },
          {
            "name": "user_classification",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Classification"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 9,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "processed_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancedFilterResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/classifications": {
      "patch": {
        "tags": [
          "classifications"
        ],
        "summary": "Batch Update Classifications",
        "description": "Update classifications for multiple images at once.\n\nParameters\n----------\nrequest : BatchClassificationRequest\n    The batch classification request containing image IDs, classification, and optional comment\n\nReturns\n-------\nBatchClassificationResponse\n    Summary of batch classification results",
        "operationId": "batch_update_classifications_images_classifications_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchClassificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchClassificationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/statistics/dashboard": {
      "get": {
        "tags": [
          "statistics"
        ],
        "summary": "Get Dashboard Statistics",
        "description": "Get comprehensive statistics for dashboard visualization.\n\nReturns\n-------\nDashboardStatsResponse\n    Detailed dashboard statistics",
        "operationId": "get_dashboard_statistics_statistics_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}/classifications": {
      "get": {
        "tags": [
          "classifications"
        ],
        "summary": "Get Classification History",
        "description": "Get the complete classification history for a specific image.\n\nThis endpoint returns all user classifications that have been made for a specific image,\nordered by timestamp (most recent first).\n\nParameters\n----------\nimage_id : str\n    ID of the image to get classifications for\n\nReturns\n-------\nClassificationHistoryResponse\n    Classification history for the image",
        "operationId": "get_classification_history_images__image_id__classifications_get",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationHistoryResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/export": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "Export Images",
        "description": "Export image data in CSV or JSON format with optional filtering.\n\nParameters\n----------\nformat : ExportFormat\n    Format for export (JSON or CSV)\nis_anomaly : Optional[bool]\n    Filter by model-detected anomaly status\nstart_date : Optional[datetime]\n    Filter by start date (inclusive)\nend_date : Optional[datetime]\n    Filter by end date (inclusive)\nmin_score : Optional[float]\n    Minimum anomaly score\nmax_score : Optional[float]\n    Maximum anomaly score\nis_classified : Optional[bool]\n    Whether the image has been classified by a user\nuser_classification : Optional[bool]\n    Filter by user classification (True for anomaly, False for normal)\ninclude_classifications : bool\n    Whether to include classification details in the export\nsort_by : Optional[str]\n    Field to sort by\nsort_order : str\n    Sort order (\"asc\" or \"desc\")\n\nReturns\n-------\nFileResponse\n    File containing the exported data",
        "operationId": "export_images_images_export_get",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat",
              "default": "json"
            }
          },
          {
            "name": "is_anomaly",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Anomaly"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Min Score"
            }
          },
          {
            "name": "max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Max Score"
            }
          },
          {
            "name": "is_classified",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Classified"
            }
          },
          {
            "name": "user_classification",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Classification"
            }
          },
          {
            "name": "include_classifications",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Classifications"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "title": "Sort Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/images/{image_id}/similarities": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get Similar Images",
        "description": "Find images with similar anomaly patterns to a reference image.\n\nParameters\n----------\nimage_id : str\n    ID of the reference image\nlimit : int\n    Maximum number of similar images to return\nmin_score : float\n    Minimum similarity score threshold (0-1)\n\nReturns\n-------\nSimilarAnomaliesResponse\n    List of similar images with similarity scores",
        "operationId": "get_similar_images_images__image_id__similarities_get",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "min_score",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0.5,
              "title": "Min Score"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarAnomaliesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/visualizations/pca": {
      "post": {
        "tags": [
          "visualizations"
        ],
        "summary": "Create Pca Visualization",
        "description": "Create a PCA projection visualization of images.\n\nParameters\n----------\nrequest : PCAProjectionRequest, optional\n    Optional request parameters for customizing the visualization\n\nReturns\n-------\nPCAProjectionResponse\n    Visualization and related data",
        "operationId": "create_pca_visualization_visualizations_pca_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PCAProjectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PCAProjectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdvancedFilterRequest": {
        "properties": {
          "date_range": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DateRangeFilterRequest"
              },
              {
                "type": "null"
              }
            ]
          },
          "anomaly_score": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnomalyScoreFilterRequest"
              },
              {
                "type": "null"
              }
            ]
          },
          "classification": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ClassificationFilterRequest"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_anomaly": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Anomaly"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "default": 1
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size",
            "default": 50
          },
          "sort_by": {
            "type": "string",
            "title": "Sort By",
            "default": "processed_at"
          },
          "sort_order": {
            "type": "string",
            "title": "Sort Order",
            "default": "desc"
          }
        },
        "type": "object",
        "title": "AdvancedFilterRequest",
        "description": "Pydantic model for advanced image filtering.\n\nAttributes\n----------\ndate_range : Optional[DateRangeFilterRequest]\n    Filter by date range\nanomaly_score : Optional[AnomalyScoreFilterRequest]\n    Filter by anomaly score range\nclassification : Optional[ClassificationFilterRequest]\n    Filter by classification status\nis_anomaly : Optional[bool]\n    Filter by model-detected anomaly status\npage : int\n    Page number for pagination\npage_size : int\n    Number of results per page\nsort_by : str\n    Field to sort results by\nsort_order : str\n    Sort order (\"asc\" or \"desc\")",
        "examples": [
          {
            "anomaly_score": {
              "max_score": 1,
              "min_score": 0.5
            },
            "classification": {
              "is_classified": true,
              "user_classification": true
            },
            "date_range": {
              "end_date": "2025-04-25T23:59:59.999Z",
              "start_date": "2025-03-25T00:00:00.000Z"
            },
            "is_anomaly": true,
            "page": 1,
            "page_size": 50,
            "sort_by": "anomaly_score",
            "sort_order": "desc"
          }
        ]
      },
      "AdvancedFilterResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "results",
          "total_count",
          "page",
          "page_size",
          "total_pages"
        ],
        "title": "AdvancedFilterResponse",
        "description": "Pydantic model for advanced filter response.\n\nAttributes\n----------\nresults : List[ImageResponse]\n    List of image records matching the filter criteria\ntotal_count : int\n    Total number of records matching the criteria\npage : int\n    Current page number\npage_size : int\n    Number of results per page\ntotal_pages : int\n    Total number of pages",
        "examples": [
          {
            "page": 1,
            "page_size": 9,
            "results": [
              {
                "anomaly_score": 2.5,
                "filename": "example.jpg",
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "is_anomaly": true,
                "path": "/uploads/550e8400-e29b-41d4-a716-446655440000.jpg",
                "reconstruction_error": 0.123,
                "timestamp": "2025-04-25T12:34:56.789Z"
              }
            ],
            "total_count": 150,
            "total_pages": 17
          }
        ]
      },
      "AnomalyScoreFilterRequest": {
        "properties": {
          "min_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Score"
          },
          "max_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Score"
          }
        },
        "type": "object",
        "title": "AnomalyScoreFilterRequest",
        "description": "Pydantic model for anomaly score range filtering.\n\nAttributes\n----------\nmin_score : Optional[float]\n    Minimum anomaly score (inclusive)\nmax_score : Optional[float]\n    Maximum anomaly score (inclusive)",
        "examples": [
          {
            "max_score": 1,
            "min_score": 0.5
          }
        ]
      },
      "AnomalyVisualizationResponse": {
        "properties": {
          "image_id": {
            "type": "string",
            "title": "Image Id"
          },
          "visualizations": {
            "items": {
              "$ref": "#/components/schemas/ImageVisualizationResponse"
            },
            "type": "array",
            "title": "Visualizations"
          },
          "reconstruction_error": {
            "type": "number",
            "title": "Reconstruction Error"
          },
          "is_anomaly": {
            "type": "boolean",
            "title": "Is Anomaly"
          },
          "anomaly_score": {
            "type": "number",
            "title": "Anomaly Score"
          }
        },
        "type": "object",
        "required": [
          "image_id",
          "visualizations",
          "reconstruction_error",
          "is_anomaly",
          "anomaly_score"
        ],
        "title": "AnomalyVisualizationResponse",
        "description": "Pydantic model for anomaly visualization response.\n\nAttributes\n----------\nimage_id : str\n    ID of the image\nvisualizations : List[ImageVisualizationResponse]\n    List of visualizations for this image\nreconstruction_error : float\n    PCA reconstruction error for the image\nis_anomaly : bool\n    Whether the image was classified as an anomaly\nanomaly_score : float\n    Normalized anomaly score (0-1)",
        "examples": [
          {
            "anomaly_score": 0.85,
            "image_id": "550e8400-e29b-41d4-a716-446655440000",
            "is_anomaly": true,
            "reconstruction_error": 0.15,
            "visualizations": [
              {
                "image_data": "base64_encoded_image_data...",
                "image_id": "550e8400-e29b-41d4-a716-446655440000",
                "visualization_type": "original"
              },
              {
                "image_data": "base64_encoded_image_data...",
                "image_id": "550e8400-e29b-41d4-a716-446655440000",
                "visualization_type": "anomaly_heatmap"
              }
            ]
          }
        ]
      },
      "BatchClassificationRequest": {
        "properties": {
          "image_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Image Ids"
          },
          "is_anomaly": {
            "type": "boolean",
            "title": "Is Anomaly"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          }
        },
        "type": "object",
        "required": [
          "image_ids",
          "is_anomaly"
        ],
        "title": "BatchClassificationRequest",
        "description": "Pydantic model for batch classification request.\n\nAttributes\n----------\nimage_ids : List[str]\n    List of image IDs to classify\nis_anomaly : bool\n    Whether the images are anomalous (True) or normal (False)\ncomment : Optional[str]\n    Optional comment to apply to all classifications",
        "examples": [
          {
            "comment": "Batch classification of multiple similar anomalies",
            "image_ids": [
              "550e8400-e29b-41d4-a716-446655440000",
              "650e8400-e29b-41d4-a716-446655440001"
            ],
            "is_anomaly": true
          }
        ]
      },
      "BatchClassificationResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "successful": {
            "type": "integer",
            "title": "Successful"
          },
          "failed": {
            "type": "integer",
            "title": "Failed"
          },
          "failed_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Failed Ids"
          }
        },
        "type": "object",
        "required": [
          "total",
          "successful",
          "failed",
          "failed_ids"
        ],
        "title": "BatchClassificationResponse",
        "description": "Pydantic model for batch classification response.\n\nAttributes\n----------\ntotal : int\n    Total number of images in the request\nsuccessful : int\n    Number of images successfully classified\nfailed : int\n    Number of images that failed to be classified\nfailed_ids : List[str]\n    List of image IDs that failed to be classified",
        "examples": [
          {
            "failed": 0,
            "failed_ids": [],
            "successful": 2,
            "total": 2
          }
        ]
      },
      "Body_create_image_images_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_create_image_images_post"
      },
      "ClassificationFilterRequest": {
        "properties": {
          "is_classified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Classified"
          },
          "user_classification": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Classification"
          }
        },
        "type": "object",
        "title": "ClassificationFilterRequest",
        "description": "Pydantic model for classification status filtering.\n\nAttributes\n----------\nis_classified : Optional[bool]\n    Whether the image has been classified by a user\nuser_classification : Optional[bool]\n    Filter by user classification (True for anomaly, False for normal)",
        "examples": [
          {
            "is_classified": true,
            "user_classification": true
          }
        ]
      },
      "ClassificationHistoryResponse": {
        "properties": {
          "image_id": {
            "type": "string",
            "title": "Image Id"
          },
          "classifications": {
            "items": {
              "$ref": "#/components/schemas/ClassificationResponse"
            },
            "type": "array",
            "title": "Classifications"
          }
        },
        "type": "object",
        "required": [
          "image_id",
          "classifications"
        ],
        "title": "ClassificationHistoryResponse",
        "description": "Pydantic model for image classification history.\n\nAttributes\n----------\nimage_id : str\n    ID of the image\nclassifications : List[ClassificationResponse]\n    List of all classifications for this image",
        "examples": [
          {
            "classifications": [
              {
                "comment": "Initial classification",
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "image_id": "550e8400-e29b-41d4-a716-446655440000",
                "timestamp": "2025-04-25T12:34:56.789Z",
                "user_classification": true
              },
              {
                "comment": "After further review, this is not an anomaly",
                "id": "650e8400-e29b-41d4-a716-446655440000",
                "image_id": "550e8400-e29b-41d4-a716-446655440000",
                "timestamp": "2025-04-26T09:12:34.567Z",
                "user_classification": false
              }
            ],
            "image_id": "550e8400-e29b-41d4-a716-446655440000"
          }
        ]
      },
      "ClassificationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "image_id": {
            "type": "string",
            "title": "Image Id"
          },
          "user_classification": {
            "type": "boolean",
            "title": "User Classification"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "image_id",
          "user_classification",
          "comment",
          "timestamp"
        ],
        "title": "ClassificationResponse",
        "description": "Pydantic model for classification response data.\n\nThis model defines the structure of the API response when returning\ninformation about an image classification.\n\nAttributes\n----------\nid : str\n    Unique identifier for the classification\nimage_id : str\n    ID of the classified image\nuser_classification : bool\n    User's classification (True for anomaly, False for normal)\ncomment : str, optional\n    Optional comment about the classification\ntimestamp : datetime\n    When the classification was made\n\nExamples\n--------\n\u003E\u003E\u003E classification_response = ClassificationResponse(\n...     id=\"550e8400-e29b-41d4-a716-446655440000\",\n...     image_id=\"550e8400-e29b-41d4-a716-446655440000\",\n...     user_classification=True,\n...     comment=\"This image shows an unusual pattern in the top right corner.\",\n...     timestamp=datetime.datetime.now()\n... )\n\u003E\u003E\u003E print(classification_response.user_classification)\nTrue",
        "examples": [
          {
            "comment": "This image shows an unusual pattern in the top right corner.",
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "image_id": "550e8400-e29b-41d4-a716-446655440000",
            "timestamp": "2025-04-25T12:34:56.789Z",
            "user_classification": true
          }
        ]
      },
      "DashboardStatsResponse": {
        "properties": {
          "total_images": {
            "type": "integer",
            "title": "Total Images"
          },
          "total_anomalies": {
            "type": "integer",
            "title": "Total Anomalies"
          },
          "user_confirmed_anomalies": {
            "type": "integer",
            "title": "User Confirmed Anomalies"
          },
          "unclassified_anomalies": {
            "type": "integer",
            "title": "Unclassified Anomalies"
          },
          "false_positives": {
            "type": "integer",
            "title": "False Positives"
          },
          "false_negatives": {
            "type": "integer",
            "title": "False Negatives"
          },
          "recent_activity": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Activity"
          }
        },
        "type": "object",
        "required": [
          "total_images",
          "total_anomalies",
          "user_confirmed_anomalies",
          "unclassified_anomalies",
          "false_positives",
          "false_negatives",
          "recent_activity"
        ],
        "title": "DashboardStatsResponse",
        "description": "Pydantic model for dashboard statistics response.\n\nAttributes\n----------\ntotal_images : int\n    Total number of images in the system\ntotal_anomalies : int\n    Total number of detected anomalies\nuser_confirmed_anomalies : int\n    Number of user-confirmed anomalies\nunclassified_anomalies : int\n    Number of anomalies not yet classified by users\nfalse_positives : int\n    Number of model anomalies classified as normal by users\nfalse_negatives : int\n    Number of model normal classified as anomalies by users\nrecent_activity : List[Dict]\n    Recent classification activity",
        "examples": [
          {
            "false_negatives": 3,
            "false_positives": 5,
            "recent_activity": [
              {
                "action": "classification",
                "is_anomaly": true,
                "timestamp": "2025-04-25T12:34:56.789Z"
              }
            ],
            "total_anomalies": 25,
            "total_images": 150,
            "unclassified_anomalies": 10,
            "user_confirmed_anomalies": 15
          }
        ]
      },
      "DateRangeFilterRequest": {
        "properties": {
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          }
        },
        "type": "object",
        "title": "DateRangeFilterRequest",
        "description": "Pydantic model for date range filtering.\n\nAttributes\n----------\nstart_date : Optional[datetime.datetime]\n    Start date for filtering (inclusive)\nend_date : Optional[datetime.datetime]\n    End date for filtering (inclusive)",
        "examples": [
          {
            "end_date": "2025-04-25T23:59:59.999Z",
            "start_date": "2025-03-25T00:00:00.000Z"
          }
        ]
      },
      "ExportFormat": {
        "type": "string",
        "enum": [
          "json",
          "csv"
        ],
        "title": "ExportFormat",
        "description": "Enum for export format options."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "status",
          "version"
        ],
        "title": "HealthCheckResponse",
        "description": "Pydantic model for health check response.\n\nAttributes\n----------\nstatus : str\n    Status of the API (e.g., \"ok\")\ntimestamp : datetime.datetime\n    Current timestamp\nversion : str\n    API version",
        "examples": [
          {
            "status": "ok",
            "timestamp": "2025-04-25T12:34:56.789Z",
            "version": "1.0.0"
          }
        ]
      },
      "ImageClassificationRequest": {
        "properties": {
          "is_anomaly": {
            "type": "boolean",
            "title": "Is Anomaly",
            "description": "True if image is anomalous, False otherwise"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Optional comment about the classification"
          }
        },
        "type": "object",
        "required": [
          "is_anomaly"
        ],
        "title": "ImageClassificationRequest",
        "description": "Pydantic model for image classification request.\n\nAttributes\n----------\nis_anomaly : bool\n    Whether the image is an anomaly (True) or normal (False)\ncomment : str, optional\n    Optional comment about the classification",
        "examples": [
          {
            "comment": "This appears to be an anomaly due to the unusual brightness pattern.",
            "is_anomaly": true
          }
        ]
      },
      "ImageClassificationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_classification": {
            "type": "boolean",
            "title": "User Classification"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_classification",
          "comment"
        ],
        "title": "ImageClassificationResponse",
        "description": "Pydantic model for image classification response.\n\nAttributes\n----------\nid : str\n    ID of the classified image\nuser_classification : bool\n    Whether the image was classified as an anomaly by the user\ncomment : str, optional\n    Optional comment about the classification",
        "examples": [
          {
            "comment": "This appears to be an anomaly due to the unusual brightness pattern.",
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "user_classification": true
          }
        ]
      },
      "ImageResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "reconstruction_error": {
            "type": "number",
            "title": "Reconstruction Error"
          },
          "is_anomaly": {
            "type": "boolean",
            "title": "Is Anomaly"
          },
          "anomaly_score": {
            "type": "number",
            "title": "Anomaly Score"
          },
          "path": {
            "type": "string",
            "title": "Path"
          }
        },
        "type": "object",
        "required": [
          "id",
          "filename",
          "timestamp",
          "reconstruction_error",
          "is_anomaly",
          "anomaly_score",
          "path"
        ],
        "title": "ImageResponse",
        "description": "Pydantic model for image response data.\n\nThis model defines the structure of the API response when returning\nimage anomaly detection results.\n\nAttributes\n----------\nid : str\n    Unique identifier for the image\nfilename : str\n    Original filename of the image\ntimestamp : datetime\n    When the image was processed\nreconstruction_error : float\n    PCA reconstruction error for the image\nis_anomaly : bool\n    Whether the image was classified as an anomaly\nanomaly_score : float\n    Normalized anomaly score\npath : str\n    Path where the image is stored\n\nExamples\n--------\n\u003E\u003E\u003E image_response = ImageResponse(\n...     id=\"550e8400-e29b-41d4-a716-446655440000\",\n...     filename=\"example.jpg\",\n...     timestamp=datetime.datetime.now(),\n...     reconstruction_error=0.123,\n...     is_anomaly=True,\n...     anomaly_score=2.5,\n...     path=\"/uploads/example.jpg\"\n... )\n\u003E\u003E\u003E print(image_response.is_anomaly)\nTrue",
        "examples": [
          {
            "anomaly_score": 2.5,
            "filename": "example.jpg",
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "is_anomaly": true,
            "path": "/uploads/550e8400-e29b-41d4-a716-446655440000.jpg",
            "reconstruction_error": 0.123,
            "timestamp": "2025-04-25T12:34:56.789Z"
          }
        ]
      },
      "ImageVisualizationResponse": {
        "properties": {
          "image_id": {
            "type": "string",
            "title": "Image Id"
          },
          "visualization_type": {
            "$ref": "#/components/schemas/ImageVisualizationType"
          },
          "image_data": {
            "type": "string",
            "title": "Image Data"
          }
        },
        "type": "object",
        "required": [
          "image_id",
          "visualization_type",
          "image_data"
        ],
        "title": "ImageVisualizationResponse",
        "description": "Pydantic model for image visualization response.\n\nAttributes\n----------\nimage_id : str\n    ID of the image\nvisualization_type : ImageVisualizationType\n    Type of visualization\nimage_data : str\n    Base64-encoded image data",
        "examples": [
          {
            "image_data": "base64_encoded_image_data...",
            "image_id": "550e8400-e29b-41d4-a716-446655440000",
            "visualization_type": "anomaly_heatmap"
          }
        ]
      },
      "ImageVisualizationType": {
        "type": "string",
        "enum": [
          "original",
          "processed",
          "anomaly_heatmap",
          "bounding_box"
        ],
        "title": "ImageVisualizationType",
        "description": "Enum for image visualization types."
      },
      "PCAProjectionRequest": {
        "properties": {
          "filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdvancedFilterRequest"
              },
              {
                "type": "null"
              }
            ]
          },
          "highlight_anomalies": {
            "type": "boolean",
            "title": "Highlight Anomalies",
            "default": true
          },
          "use_interactive": {
            "type": "boolean",
            "title": "Use Interactive",
            "default": false
          },
          "include_image_paths": {
            "type": "boolean",
            "title": "Include Image Paths",
            "default": false
          }
        },
        "type": "object",
        "title": "PCAProjectionRequest",
        "description": "Pydantic model for PCA projection request.\n\nAttributes\n----------\nfilter : Optional[AdvancedFilterRequest]\n    Optional filter to apply before generating projection\nhighlight_anomalies : bool\n    Whether to highlight anomalies in the projection\nuse_interactive : bool\n    Whether to use interactive Plotly visualization\ninclude_image_paths : bool\n    Whether to include image paths in the response data",
        "examples": [
          {
            "filter": {
              "is_anomaly": true
            },
            "highlight_anomalies": true,
            "include_image_paths": false,
            "use_interactive": true
          }
        ]
      },
      "PCAProjectionResponse": {
        "properties": {
          "visualization": {
            "type": "string",
            "title": "Visualization"
          },
          "projection_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Projection Data"
          },
          "anomaly_threshold": {
            "type": "number",
            "title": "Anomaly Threshold"
          },
          "total_points": {
            "type": "integer",
            "title": "Total Points"
          },
          "anomaly_count": {
            "type": "integer",
            "title": "Anomaly Count"
          },
          "is_interactive": {
            "type": "boolean",
            "title": "Is Interactive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "visualization",
          "anomaly_threshold",
          "total_points",
          "anomaly_count"
        ],
        "title": "PCAProjectionResponse",
        "description": "Pydantic model for PCA projection response.\n\nAttributes\n----------\nvisualization : str\n    Base64-encoded visualization image (PNG or HTML for interactive)\nprojection_data : Optional[dict]\n    Raw projection data including coordinates and metadata\nanomaly_threshold : float\n    Threshold used for anomaly detection\ntotal_points : int\n    Total number of points in the projection\nanomaly_count : int\n    Number of anomalies in the projection",
        "examples": [
          {
            "anomaly_count": 10,
            "anomaly_threshold": 0.1,
            "is_interactive": false,
            "projection_data": {
              "anomalies": [
                {
                  "error": 0.15,
                  "is_anomaly": true,
                  "x": 0.8,
                  "y": 0.9
                }
              ],
              "points": [
                {
                  "error": 0.05,
                  "is_anomaly": false,
                  "x": 0.1,
                  "y": 0.2
                }
              ]
            },
            "total_points": 100,
            "visualization": "base64_encoded_image_data..."
          }
        ]
      },
      "PaginatedImagesResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            },
            "type": "array",
            "title": "Results"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "results",
          "total_count",
          "page",
          "page_size",
          "total_pages"
        ],
        "title": "PaginatedImagesResponse",
        "description": "Pydantic model for paginated images response.\n\nAttributes\n----------\nresults : List[ImageResponse]\n    List of image records for the current page\ntotal_count : int\n    Total number of records matching the criteria\npage : int\n    Current page number\npage_size : int\n    Number of results per page\ntotal_pages : int\n    Total number of pages",
        "examples": [
          {
            "page": 1,
            "page_size": 9,
            "results": [
              {
                "anomaly_score": 2.5,
                "filename": "example.jpg",
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "is_anomaly": true,
                "path": "/uploads/550e8400-e29b-41d4-a716-446655440000.jpg",
                "reconstruction_error": 0.123,
                "timestamp": "2025-04-25T12:34:56.789Z"
              }
            ],
            "total_count": 150,
            "total_pages": 17
          }
        ]
      },
      "SimilarAnomaliesResponse": {
        "properties": {
          "reference_image_id": {
            "type": "string",
            "title": "Reference Image Id"
          },
          "similar_images": {
            "items": {
              "$ref": "#/components/schemas/SimilarityResult"
            },
            "type": "array",
            "title": "Similar Images"
          }
        },
        "type": "object",
        "required": [
          "reference_image_id",
          "similar_images"
        ],
        "title": "SimilarAnomaliesResponse",
        "description": "Pydantic model for similar anomalies response.\n\nAttributes\n----------\nreference_image_id : str\n    ID of the reference image\nsimilar_images : List[SimilarityResult]\n    List of similar images with similarity scores",
        "examples": [
          {
            "reference_image_id": "550e8400-e29b-41d4-a716-446655440000",
            "similar_images": [
              {
                "image": {
                  "anomaly_score": 2.3,
                  "filename": "similar1.jpg",
                  "id": "650e8400-e29b-41d4-a716-446655440000",
                  "is_anomaly": true,
                  "path": "/uploads/650e8400-e29b-41d4-a716-446655440000.jpg",
                  "reconstruction_error": 0.125,
                  "timestamp": "2025-04-25T12:34:56.789Z"
                },
                "similarity_score": 0.92
              }
            ]
          }
        ]
      },
      "SimilarityResult": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/ImageResponse"
          },
          "similarity_score": {
            "type": "number",
            "title": "Similarity Score"
          }
        },
        "type": "object",
        "required": [
          "image",
          "similarity_score"
        ],
        "title": "SimilarityResult",
        "description": "Pydantic model for a single similarity result.\n\nAttributes\n----------\nimage : ImageResponse\n    The similar image\nsimilarity_score : float\n    Score indicating similarity to the reference image (0-1)",
        "examples": [
          {
            "image": {
              "anomaly_score": 2.3,
              "filename": "similar.jpg",
              "id": "650e8400-e29b-41d4-a716-446655440000",
              "is_anomaly": true,
              "path": "/uploads/650e8400-e29b-41d4-a716-446655440000.jpg",
              "reconstruction_error": 0.125,
              "timestamp": "2025-04-25T12:34:56.789Z"
            },
            "similarity_score": 0.92
          }
        ]
      },
      "StatisticsResponse": {
        "properties": {
          "total_images": {
            "type": "integer",
            "title": "Total Images"
          },
          "anomalies_detected": {
            "type": "integer",
            "title": "Anomalies Detected"
          },
          "classified_images": {
            "type": "integer",
            "title": "Classified Images"
          },
          "average_anomaly_score": {
            "type": "number",
            "title": "Average Anomaly Score"
          },
          "storage_type": {
            "type": "string",
            "title": "Storage Type"
          },
          "storage_location": {
            "type": "string",
            "title": "Storage Location"
          }
        },
        "type": "object",
        "required": [
          "total_images",
          "anomalies_detected",
          "classified_images",
          "average_anomaly_score",
          "storage_type",
          "storage_location"
        ],
        "title": "StatisticsResponse",
        "description": "Pydantic model for statistics response.\n\nAttributes\n----------\ntotal_images : int\n    Total number of images processed\nanomalies_detected : int\n    Number of anomalies detected\nclassified_images : int\n    Number of images that have been classified by users\naverage_anomaly_score : float\n    Average anomaly score across all images\nstorage_type : str\n    Type of storage being used (e.g., \"Google Cloud Storage\" or \"Local\")\nstorage_location : str\n    Location where images are being stored",
        "examples": [
          {
            "anomalies_detected": 10,
            "average_anomaly_score": 0.3,
            "classified_images": 50,
            "storage_location": "my-bucket",
            "storage_type": "Google Cloud Storage",
            "total_images": 100
          }
        ]
      },
      "SyncAnomalyDataResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "source": {
            "type": "string",
            "title": "Source"
          },
          "imported_count": {
            "type": "integer",
            "title": "Imported Count"
          },
          "anomaly_count": {
            "type": "integer",
            "title": "Anomaly Count"
          },
          "skipped_count": {
            "type": "integer",
            "title": "Skipped Count"
          },
          "error_count": {
            "type": "integer",
            "title": "Error Count"
          },
          "total_records": {
            "type": "integer",
            "title": "Total Records"
          }
        },
        "type": "object",
        "required": [
          "message",
          "source",
          "imported_count",
          "anomaly_count",
          "skipped_count",
          "error_count",
          "total_records"
        ],
        "title": "SyncAnomalyDataResponse",
        "description": "Pydantic model for synchronizing anomaly data response.\n\nAttributes\n----------\nmessage : str\n    Summary message about the synchronization\nsource : str\n    Source of the anomaly data\nimported_count : int\n    Number of new records imported\nanomaly_count : int\n    Number of anomalies among imported records\nskipped_count : int\n    Number of records skipped (already in DB)\nerror_count : int\n    Number of records that had errors\ntotal_records : int\n    Total number of records after synchronization",
        "examples": [
          {
            "anomaly_count": 5,
            "error_count": 0,
            "imported_count": 50,
            "message": "Successfully synchronized anomaly data",
            "skipped_count": 10,
            "source": "gs://my-bucket/anomaly_reaper/embeddings_df.csv",
            "total_records": 150
          }
        ]
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "health",
      "description": "Health check endpoint for monitoring system status"
    },
    {
      "name": "images",
      "description": "Operations with images including upload, retrieval, and classification"
    },
    {
      "name": "statistics",
      "description": "Statistical information about processed images and anomalies"
    },
    {
      "name": "visualizations",
      "description": "Generate visualizations for anomalies and data projections"
    },
    {
      "name": "export",
      "description": "Export data in various formats"
    },
    {
      "name": "classifications",
      "description": "Classify images as anomalous or normal"
    }
  ]
}